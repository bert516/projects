import tkinter as tk
import tkmacosx as tkm
from tkinter import ttk

from currency_abr import currency_dict

class searchable_Combobox(ttk.Combobox):
    def __init__(self,master= None, parent_gui = None, **kwargs):
        self.parent_gui = parent_gui
        super().__init__(master, **kwargs)
        self.bind("<KeyRelease>", self.search)
        self.bind("<Return>", self.enter_shortcut)
        self.completionlist = []
    def set_completionlist(self, list):
        self.completionlist = sorted(list)
        self["values"] = self.completionlist
    def search(self, event):
        current_text = self.get()
        if current_text and current_text.isalpha():
            filtered = [i for i in self.completionlist if i.lower().startswith(current_text.lower()) or currency_dict[i].lower().startswith(current_text.lower())]
            self["values"] = filtered
        else:
            self["values"] = self.completionlist
        if not filtered:
            self["values"] = ["No matches found"]
        self.event_generate("<Down>")
        self.focus_set()
    def enter_shortcut(self, event):
        self.current(0)
        self.event_generate("<<ComboboxSelected>>")
        self.master.focus_set()

class only_digit_text(tk.Text):
    def __init__(self, master=None, **kwargs):
        super().__init__(master, **kwargs)
        self.bind("<KeyPress>", self.edit)
    def edit(self, event=None):
        key_pressed = event.char
        key_sym = event.keysym
        if key_pressed.isdigit() or key_pressed == "." or key_sym in ["BackSpace", "Delete", "Return"]:
            return
        return "break"
        
class GUI:
    def __init__(self) -> None:
        self.root = tk.Tk()
        self.root.title("Currency Converter")
        self.root.geometry("550x300+450+200")

        self.currency1Text = only_digit_text(height=1, width=20, font=("Arial", 20))
        self.currency1Text.bind("<KeyRelease>", self.first_convert)
        self.currency1Text.bind("<Down>", self.focus_second)
        self.currency1Text.grid(row=0, column=0, padx=10, pady=10)

        options = [i for i in api.data["data"].keys()]
        self.currencyoption1 = searchable_Combobox(self.root, height=10, parent_gui=self)
        self.currencyoption1.set_completionlist(options)
        self.currencyoption1.set("EUR")
        self.currencyoption1.bind("<<ComboboxSelected>>", self.convert_by_option)
        self.currencyoption1.grid(row=0, column=1, padx=10, pady=10)

        self.currency2text = only_digit_text(height=1, width=20, font=("Arial", 20))
        self.currency2text.bind("<KeyRelease>", self.second_convert)
        self.currency2text.bind("<Up>", self.focus_first)
        self.currency2text.grid(row=1, column=0, padx=10, pady=10)
        
        self.currencyoption2 = searchable_Combobox(self.root, height=10, parent_gui=self)
        self.currencyoption2.set_completionlist(options)
        self.currencyoption2.set("USD")
        self.currencyoption2.bind("<<ComboboxSelected>>", self.convert_by_option)
        self.currencyoption2.grid(row=1, column=1, padx=10, pady=10)

        self.currency1Text.insert(tk.END, str(api.data["data"]["EUR"]["value"]))
        self.currency2text.insert(tk.END, str(float(api.data["data"]["USD"]["value"])))

        self.root.mainloop()

    def first_convert(self, event=None):
        if event.keysym == "Down":
            return
        value = self.currency1Text.get("1.0", tk.END).strip()
        currency1 = self.currencyoption1.get()
        currency2 = self.currencyoption2.get()
        
        self.currency2text.delete("1.0", tk.END)
        converted = float(value) * float(api.data["data"][currency2]["value"])/float(api.data["data"][currency1]["value"])
        self.currency2text.insert(tk.END, str(converted))
    def second_convert(self, event=None):
        if event.keysym == "Up":
            return
        value = self.currency2text.get("1.0", tk.END).strip()
        currency1 = self.currencyoption1.get()
        currency2 = self.currencyoption2.get()

        self.currency1Text.delete("1.0", tk.END)
        converted = float(value) * float(api.data["data"][currency1]["value"])/float(api.data["data"][currency2]["value"])
        self.currency1Text.insert(tk.END, str(converted))
    def convert_by_option(self, event=None):
        if self.currency1Text:
            value = self.currency1Text.get("1.0", tk.END).strip()
        currency1 = self.currencyoption1.get()
        currency2 = self.currencyoption2.get()
        if currency1 and currency2:
            self.currency2text.delete("1.0", tk.END)
            converted = float(value) * float(api.data["data"][currency2]["value"])/float(api.data["data"][currency1]["value"])
            self.currency2text.insert(tk.END, str(converted))
    def focus_first(self, event=None):
        self.currency1Text.focus_set()

    def focus_second(self, event=None):
        self.currency2text.focus_set()




        
GUI()        

